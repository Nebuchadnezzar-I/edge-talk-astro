import{j as e,B as i}from"./button.BI6niL5U.js";import{A,a as v,b as q,c as D,d as C,e as S,f as b,g as N,h as T}from"./alert-dialog.DIwoc_Q4.js";import{T as k}from"./textarea.BqRSn4iu.js";import{a as O}from"./_astro_actions.Dz5ahgF_.js";import{r as o}from"./index.DBH57-O4.js";import"./index.Dp6ew2DP.js";import"./index.CPFu2Pb6.js";import"./_commonjsHelpers.CqkleIqs.js";import"./index.CNR-ZafQ.js";const n=[];function $({id:r,openAIkey:d}){const[s,l]=o.useState(""),[c,g]=o.useState("Whatâ€™s one key outcome you hope to achieve in this negotiation?"),[a,p]=o.useTransition(),[m,f]=o.useState(!0);if(r==="")return null;const u=()=>{p(()=>{(async()=>{try{n.push({q:c,a:s});const t=await x()||"";if(console.log("New question",t),n.length>=10){await O.newSession({name:Math.random().toString(36).substring(7),nId:parseInt(r??"0"),qna:n}),f(!1),window.location.reload();return}g(t??"No more questions"),l("")}catch(t){console.error("Failed to generate the next question",t)}})()})},x=async()=>{const t=d,y="https://api.openai.com/v1/chat/completions";try{const w=await(await fetch(y,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify({model:"gpt-3.5-turbo",messages:[{role:"system",content:`
                            You are a negotiation expert assisting the user in defining their negotiation strategy. Your goal is to understand their needs, priorities, and any constraints they might have. Ask one question at a time, building on their previous answers to uncover specifics that will help you prepare them for the negotiation.
                            Be conversational and empathetic. Frame questions in a way that feels natural, as if you are a trusted advisor who genuinely wants to help. Use previous chat context: ${JSON.stringify(n)} to avoid repeating questions. Limit yourself to a maximum of 10 questions, and if you have already asked 10, respond briefly and acknowledge that you've gathered enough for now.
                            `}],max_tokens:100,stop:[`
`]})})).json(),{choices:j}=w;return j[0]?.message?.content}catch(h){return console.error("Error fetching questions:",h),""}};return e.jsxs(A,{children:[e.jsx(v,{asChild:!0,children:e.jsx(i,{variant:"outline",children:"Add new session"})}),e.jsxs(q,{children:[e.jsxs(D,{children:[e.jsx(C,{children:"Create session"}),e.jsxs(S,{className:"flex flex-col gap-3",children:[e.jsx("span",{children:c}),e.jsx(k,{onChange:t=>l(t.target.value),value:s,disabled:a})]})]}),e.jsxs(b,{children:[e.jsx(N,{children:"Cancel"}),m?e.jsx(i,{onClick:u,disabled:a||!s,children:a?"Loading...":"Next"}):e.jsx(i,{variant:"default",children:e.jsx(T,{onClick:u,children:"Finish"})})]})]})]})}export{$ as NewSession};
